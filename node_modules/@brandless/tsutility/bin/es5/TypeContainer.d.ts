import { Interface } from "./Interface";
import { TypeMetadata } from "./TypeMetadata";
declare type TypeContainerArg = TypeContainer | Interface<any> | Function;
declare type TypeContainerArgument = TypeContainerArg | Array<TypeContainerArg>;
export declare class TypeContainer {
    isGeneric: boolean;
    readonly IsEnum: boolean;
    readonly IsArray: boolean;
    ClassName: string;
    private static _lookup;
    private _genericTypes;
    readonly genericTypes: TypeContainer[];
    readonly genericTypeParameters: TypeMetadata[];
    nameOverride: any;
    private _type;
    readonly type: Function | Interface<any>;
    private _uniqueName;
    readonly uniqueName: string;
    readonly fullUniqueName: string;
    readonly fullName: string;
    readonly fullRawName: string;
    constructor(type: Function | Interface<any>, ...genericTypeContainers: TypeContainer[]);
    MakeGenericType(...genericTypes: Array<TypeContainerArgument>): TypeContainer;
    static GetUniqueName(type: Function | Interface<any> | TypeContainer | {
        [s: number]: string;
    }, ...genericTypeContainers: TypeContainer[]): string;
    static GetUniqueTypeContainerName(type: TypeContainer): string;
    static Get(type: TypeContainerArg | {
        [s: number]: string;
    }, ...genericTypeContainers: Array<TypeContainerArgument>): TypeContainer | null;
}
export {};
